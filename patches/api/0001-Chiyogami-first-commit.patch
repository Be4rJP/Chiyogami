From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Be4rJP <bea0224@outlook.jp>
Date: Sun, 9 Jan 2022 05:51:56 +0900
Subject: [PATCH] Chiyogami first commit


diff --git a/build.gradle.kts b/build.gradle.kts
index 001c2b963205012f340db0d539e4033c748124ce..dac081eaa26fc7375f10597c2207ef832c7c5f02 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -21,6 +21,10 @@ configurations.api {
     extendsFrom(apiAndDocs)
 }
 
+repositories {
+    maven ( "https://jitpack.io" )
+}
+
 dependencies {
     // api dependencies are listed transitively to API consumers
     api("commons-lang:commons-lang:2.6")
@@ -63,6 +67,8 @@ dependencies {
     testImplementation("junit:junit:4.13.2")
     testImplementation("org.hamcrest:hamcrest-library:1.3")
     testImplementation("org.ow2.asm:asm-tree:9.2")
+
+    implementation("com.github.Be4rJP:ChiyogamiLib:f5e45239d5")
 }
 
 configure<PublishingExtension> {
diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 199789d56d22fcb1b77ebd56805cc28aa5a5ab0a..8daa5e5d12a7eafbb01f1512ec3f12fe67290be9 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -22,98 +22,167 @@
  * THE SOFTWARE.
  */
 package co.aikar.timings;
-
 import co.aikar.util.LoadingIntMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 
 import java.util.ArrayDeque;
 import java.util.Deque;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import org.bukkit.Bukkit;
+import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-
-class TimingHandler implements Timing {
-
-    private static AtomicInteger idPool = new AtomicInteger(1);
-    private static Deque<TimingHandler> TIMING_STACK = new ArrayDeque<>();
+import world.chiyogami.chiyogamilib.WorldThreads;
+
+public class TimingHandler implements Timing {
+    
+    protected static AtomicInteger idPool = new AtomicInteger(1);
+    protected static Deque<TimingHandler> MAIN_THREAD_TIMING_STACK = new ArrayDeque<>();
+    protected static Map<Thread, Deque<TimingHandler>> WORLD_THREAD_TIMING_STACK = new ConcurrentHashMap<>();
+    protected static TimingHandler WORLD_PARENT_TIMING = null;
     final int id = idPool.getAndIncrement();
-
+    
     final TimingIdentifier identifier;
-    private final boolean verbose;
-
-    private final Int2ObjectOpenHashMap<TimingData> children = new LoadingIntMap<>(TimingData::new);
-
+    protected final boolean verbose;
+    
+    protected final Map<Integer, TimingData> children = new ConcurrentHashMap<>();
+    
     final TimingData record;
-    private TimingHandler startParent;
-    private final TimingHandler groupHandler;
-
-    private long start = 0;
-    private int timingDepth = 0;
-    private boolean added;
-    private boolean timed;
-    private boolean enabled;
-
+    protected TimingHandler startParent;
+    protected final TimingHandler groupHandler;
+    
+    protected long start = 0;
+    protected int timingDepth = 0;
+    protected boolean added;
+    protected boolean timed;
+    protected boolean enabled;
+    
     TimingHandler(@NotNull TimingIdentifier id) {
         this.identifier = id;
         this.verbose = id.name.startsWith("##");
         this.record = new TimingData(this.id);
         this.groupHandler = id.groupHandler;
-
+        
         TimingIdentifier.getGroup(id.group).handlers.add(this);
         checkEnabled();
     }
-
+    
+    public static class WorldTiming extends TimingHandler{
+        
+        WorldTiming(@NotNull TimingIdentifier id) {
+            super(id);
+        }
+        
+        
+        @Override
+        @NotNull
+        public Timing startTiming() {
+            return startTiming(false);
+        }
+        
+        
+        @NotNull
+        public Timing startTiming(boolean parent) {
+            if (!enabled || !Bukkit.isPrimaryThread()) {
+                return this;
+            }
+            
+            if(!WorldThreads.isWorldThread()) return this;
+            
+            Deque<TimingHandler> timingHandlers = WORLD_THREAD_TIMING_STACK.computeIfAbsent(Thread.currentThread(), k -> new ArrayDeque<>());
+            if (++timingDepth == 1) {
+                startParent = timingHandlers.peekLast();
+                if(parent){
+                    startParent = WORLD_PARENT_TIMING;
+                }
+                start = System.nanoTime();
+            }
+            timingHandlers.addLast(this);
+            
+            return this;
+        }
+        
+        @Override
+        public void stopTiming() {
+            if (!enabled || timingDepth <= 0 || start == 0 || !Bukkit.isPrimaryThread()) {
+                return;
+            }
+            
+            if(!WorldThreads.isWorldThread()) return;
+            
+            popTimingStack();
+            if (--timingDepth == 0) {
+                addDiff(System.nanoTime() - start, startParent);
+                startParent = null;
+                start = 0;
+            }
+        }
+    }
+    
+    
+    
+    
+    
+    
     final void checkEnabled() {
         enabled = Timings.timingsEnabled && (!verbose || Timings.verboseEnabled);
     }
-
+    
     void processTick(boolean violated) {
         if (timingDepth != 0 || record.getCurTickCount() == 0) {
             timingDepth = 0;
             start = 0;
             return;
         }
-
+        
         record.processTick(violated);
         for (TimingData handler : children.values()) {
             handler.processTick(violated);
         }
     }
-
+    
     @NotNull
     @Override
     public Timing startTimingIfSync() {
         startTiming();
         return this;
     }
-
+    
     @Override
     public void stopTimingIfSync() {
         stopTiming();
     }
-
+    
     @NotNull
     public Timing startTiming() {
         if (!enabled || !Bukkit.isPrimaryThread()) {
             return this;
         }
-        if (++timingDepth == 1) {
-            startParent = TIMING_STACK.peekLast();
-            start = System.nanoTime();
+        
+        if(!WorldThreads.isWorldThread()){
+            if (++timingDepth == 1) {
+                startParent = MAIN_THREAD_TIMING_STACK.peekLast();
+                start = System.nanoTime();
+            }
+            MAIN_THREAD_TIMING_STACK.addLast(this);
         }
-        TIMING_STACK.addLast(this);
+        
         return this;
     }
-
+    
     public void stopTiming() {
         if (!enabled || timingDepth <= 0 || start == 0 || !Bukkit.isPrimaryThread()) {
             return;
         }
-
+        
+        if(WorldThreads.isWorldThread()) return;
+        
         popTimingStack();
         if (--timingDepth == 0) {
             addDiff(System.nanoTime() - start, startParent);
@@ -121,36 +190,65 @@ class TimingHandler implements Timing {
             start = 0;
         }
     }
-
-    private void popTimingStack() {
+    
+    public static synchronized void initializeWorldTiming(){
+        WORLD_PARENT_TIMING = MAIN_THREAD_TIMING_STACK.peekLast();
+    }
+    
+    public static void clearWorldTimings(){
+        WORLD_THREAD_TIMING_STACK.clear();
+        WORLD_PARENT_TIMING = null;
+    }
+    
+    protected void popTimingStack() {
         TimingHandler last;
-        while ((last = TIMING_STACK.removeLast()) != this) {
-            last.timingDepth = 0;
-            if ("Minecraft".equalsIgnoreCase(last.identifier.group)) {
-                Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Look above this for any errors and report this to Paper unless it has a plugin in the stack trace (" + last.identifier + " did not stopTiming)");
-            } else {
-                Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Report this to the plugin " + last.identifier.group + " (Look for errors above this in the logs) (" + last.identifier + " did not stopTiming)", new Throwable());
+        
+        if(!WorldThreads.isWorldThread()) {
+            while ((last = MAIN_THREAD_TIMING_STACK.removeLast()) != this) {
+                last.timingDepth = 0;
+                if ("Minecraft".equalsIgnoreCase(last.identifier.group)) {
+                    Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Look above this for any errors and report this to Paper unless it has a plugin in the stack trace (" + last.identifier + " did not stopTiming)");
+                } else {
+                    Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Report this to the plugin " + last.identifier.group + " (Look for errors above this in the logs) (" + last.identifier + " did not stopTiming)", new Throwable());
+                }
+                
+                boolean found = MAIN_THREAD_TIMING_STACK.contains(this);
+                if (!found) {
+                    // We aren't even in the stack... Don't pop everything
+                    MAIN_THREAD_TIMING_STACK.addLast(last);
+                    break;
+                }
             }
-
-            boolean found = TIMING_STACK.contains(this);
-            if (!found) {
-                // We aren't even in the stack... Don't pop everything
-                TIMING_STACK.addLast(last);
-                break;
+        } else {
+            Deque<TimingHandler> timingHandlers = WORLD_THREAD_TIMING_STACK.computeIfAbsent(Thread.currentThread(), k -> new ArrayDeque<>());
+            while ((last = timingHandlers.removeLast()) != this) {
+                last.timingDepth = 0;
+                if ("Minecraft".equalsIgnoreCase(last.identifier.group)) {
+                    Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Look above this for any errors and report this to Paper unless it has a plugin in the stack trace (" + last.identifier + " did not stopTiming)");
+                } else {
+                    Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Report this to the plugin " + last.identifier.group + " (Look for errors above this in the logs) (" + last.identifier + " did not stopTiming)", new Throwable());
+                }
+                
+                boolean found = timingHandlers.contains(this);
+                if (!found) {
+                    // We aren't even in the stack... Don't pop everything
+                    timingHandlers.addLast(last);
+                    break;
+                }
             }
         }
     }
-
+    
     @Override
     public final void abort() {
-
+    
     }
-
+    
     void addDiff(long diff, @Nullable TimingHandler parent) {
         if (parent != null) {
-            parent.children.get(id).add(diff);
+            parent.children.computeIfAbsent(id, TimingData::new).add(diff);
         }
-
+        
         record.add(diff);
         if (!added) {
             added = true;
@@ -159,10 +257,10 @@ class TimingHandler implements Timing {
         }
         if (groupHandler != null) {
             groupHandler.addDiff(diff, parent);
-            groupHandler.children.get(id).add(diff);
+            groupHandler.children.computeIfAbsent(id, TimingData::new).add(diff);
         }
     }
-
+    
     /**
      * Reset this timer, setting all values to zero.
      */
@@ -177,23 +275,23 @@ class TimingHandler implements Timing {
         children.clear();
         checkEnabled();
     }
-
+    
     @NotNull
     @Override
     public TimingHandler getTimingHandler() {
         return this;
     }
-
+    
     @Override
     public boolean equals(Object o) {
         return (this == o);
     }
-
+    
     @Override
     public int hashCode() {
         return id;
     }
-
+    
     /**
      * This is simply for the Closeable interface so it can be used with try-with-resources ()
      */
@@ -201,19 +299,19 @@ class TimingHandler implements Timing {
     public void close() {
         stopTimingIfSync();
     }
-
+    
     public boolean isSpecial() {
         return this == TimingsManager.FULL_SERVER_TICK || this == TimingsManager.TIMINGS_TICK;
     }
-
+    
     boolean isTimed() {
         return timed;
     }
-
+    
     public boolean isEnabled() {
         return enabled;
     }
-
+    
     @NotNull
     TimingData[] cloneChildren() {
         final TimingData[] clonedChildren = new TimingData[children.size()];
diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
index da76e1aaee1dee794e38ddd4e0a28e0071e90bbf..91036307ce873111a4d8b2b9030d664b02dba752 100644
--- a/src/main/java/co/aikar/timings/Timings.java
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -293,4 +293,29 @@ public final class Timings {
     static TimingHandler ofSafe(@Nullable String groupName, @NotNull String name, @Nullable Timing groupHandler) {
         return TimingsManager.getHandler(groupName, name, groupHandler);
     }
+    
+    
+    @NotNull
+    public static TimingHandler ofSafeW(@NotNull String name) {
+        return ofSafeW(null, name, null);
+    }
+    
+    @NotNull
+    static Timing ofSafeW(@Nullable Plugin plugin, @NotNull String name) {
+        Timing pluginHandler = null;
+        if (plugin != null) {
+            pluginHandler = ofSafeW(plugin.getName(), "Combined Total", TimingsManager.PLUGIN_GROUP_HANDLER);
+        }
+        return ofSafeW(plugin != null ? plugin.getName() : "Minecraft - Invalid Plugin", name, pluginHandler);
+    }
+    
+    @NotNull
+    static TimingHandler ofSafeW(@NotNull String name, @Nullable Timing groupHandler) {
+        return ofSafeW(null, name, groupHandler);
+    }
+    
+    @NotNull
+    static TimingHandler ofSafeW(@Nullable String groupName, @NotNull String name, @Nullable Timing groupHandler) {
+        return TimingsManager.getHandlerW(groupName, name, groupHandler);
+    }
 }
diff --git a/src/main/java/co/aikar/timings/TimingsManager.java b/src/main/java/co/aikar/timings/TimingsManager.java
index a92925d41110226f7fda055b71ce7be60eedd038..5ad46f11a76b169b343a1fb39f14647237626d18 100644
--- a/src/main/java/co/aikar/timings/TimingsManager.java
+++ b/src/main/java/co/aikar/timings/TimingsManager.java
@@ -40,9 +40,7 @@ import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public final class TimingsManager {
-    static final Map<TimingIdentifier, TimingHandler> TIMING_MAP = LoadingMap.of(
-        new ConcurrentHashMap<>(4096, .5F), TimingHandler::new
-    );
+    static final Map<TimingIdentifier, TimingHandler> TIMING_MAP = new ConcurrentHashMap<>(4096, .5F);
     public static final FullServerTickHandler FULL_SERVER_TICK = new FullServerTickHandler();
     public static final TimingHandler TIMINGS_TICK = Timings.ofSafe("Timings Tick", FULL_SERVER_TICK);
     public static final Timing PLUGIN_GROUP_HANDLER = Timings.ofSafe("Plugins");
@@ -132,7 +130,12 @@ public final class TimingsManager {
 
     @NotNull
     static TimingHandler getHandler(@Nullable String group, @NotNull String name, @Nullable Timing parent) {
-        return TIMING_MAP.get(new TimingIdentifier(group, name, parent));
+        return TIMING_MAP.computeIfAbsent(new TimingIdentifier(group, name, parent), TimingHandler::new);
+    }
+    
+    @NotNull
+    static TimingHandler getHandlerW(@Nullable String group, @NotNull String name, @Nullable Timing parent) {
+        return TIMING_MAP.computeIfAbsent(new TimingIdentifier(group, name, parent), TimingHandler.WorldTiming::new);
     }
 
 
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 1366496271c4c7f72d1e5f990e51775b1c371f99..71fd0ad36b3345e62b35eaf0b81cd79c89959ca6 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -20,6 +20,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.WeakHashMap;
+import java.util.concurrent.locks.ReentrantLock;
 import java.util.logging.Level;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -60,6 +61,9 @@ public final class SimplePluginManager implements PluginManager {
     private final Map<String, Map<Permissible, Boolean>> permSubs = new HashMap<String, Map<Permissible, Boolean>>();
     private final Map<Boolean, Map<Permissible, Boolean>> defSubs = new HashMap<Boolean, Map<Permissible, Boolean>>();
     private boolean useTimings = false;
+    
+    private final ReentrantLock EVENT_LOCK = new ReentrantLock(true); // Chiyogami
+    public static boolean synchronizedEvent = true; // Chiyogami
 
     public SimplePluginManager(@NotNull Server instance, @NotNull SimpleCommandMap commandMap) {
         server = instance;
@@ -615,29 +619,47 @@ public final class SimplePluginManager implements PluginManager {
         } else if (!event.isAsynchronous() && !server.isPrimaryThread() && !server.isStopping() ) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
         }
-
+    
+        if(synchronizedEvent) {
+            boolean isSync = !event.isAsynchronous();
+            if (isSync) {
+                EVENT_LOCK.lock();
+                try {
+                    runEvent(event);
+                } finally {
+                    EVENT_LOCK.unlock();
+                }
+            } else {
+                runEvent(event);
+            }
+        }else{
+            runEvent(event);
+        }
+    }
+    
+    private void runEvent(Event event){
         HandlerList handlers = event.getHandlers();
         RegisteredListener[] listeners = handlers.getRegisteredListeners();
-
+    
         for (RegisteredListener registration : listeners) {
             if (!registration.getPlugin().isEnabled()) {
                 continue;
             }
-
+        
             try {
                 registration.callEvent(event);
             } catch (AuthorNagException ex) {
                 Plugin plugin = registration.getPlugin();
-
+            
                 if (plugin.isNaggable()) {
                     plugin.setNaggable(false);
-
+                
                     server.getLogger().log(Level.SEVERE, String.format(
-                            "Nag author(s): '%s' of '%s' about the following: %s",
-                            plugin.getDescription().getAuthors(),
-                            plugin.getDescription().getFullName(),
-                            ex.getMessage()
-                            ));
+                        "Nag author(s): '%s' of '%s' about the following: %s",
+                        plugin.getDescription().getAuthors(),
+                        plugin.getDescription().getFullName(),
+                        ex.getMessage()
+                    ));
                 }
             } catch (Throwable ex) {
                 // Paper start - error reporting
